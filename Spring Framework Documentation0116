public final class NumberFormatAnnotationFormatterFactory
      implements AnnotationFormatterFactory<NumberFormat> {

        public Set<Class<?>> getFieldTypes(){
          return new HashSet<Class<?>>(asList(new Class<?>[] {
            Short.class, Integer.class, Long.class, Float.class,
            Double.class, BigDecimal.class, BigInteger.class}));
        }

        public Printer<Number> getPrinter(NumberFormat annotation, Class<?>fieldType) {

          return configureFormatterFrom(annotation, fieldType);
        }

        public Parser<Number> getParser(NumberFrom annotation, Class<?>fieldType) {
          return configureFormatterFrom(annotation, fieldType);
        }

        private Formatter<Number> configureFormmatterFrom(NumberFormat annotation, Class<?>fieldType) {
          if(!annotation.pattern().isEmpty()) {
            return new NumberStyleFormater(annotation.pattern());
          }else{
            Style style = annotation.style();
            if(style == Style.PERCENT) {
              return new PercentStyleFormatter();
            }else if(style == Style.CURRENCY) {
              return new CurrencyStyleFormatter();
            }else{
              return new NumberStyleFormatter();
            }
          }
        }
      }

//
public class MyModel{

  @NumberFormat(style = Style.CURRENCY)
  private BigDecimal decimal;
  
}
//
public class MyModel{

  @DateTimeFormat(iso=IOS.DATE)
  private Date date;
}

//

package org.springframework.format;

public interface FormatterRegistry extends ConverterRegistry {

  void addPrinter(Printer<?>printer);

  void addParser(Parser<?>parser);

  void addFormatter(Formatter<?>formatter);

  void addFormatterForFieldType(Class<?>fieldtype, Formatter<?>formatter);

  void addFormatterForFieldType(Class<?>fieldtype, Printer<?> printer, Parser<?>
                                parser);

  void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends
                                      Annotation > annotationFormatterFactory);
}
//
package org.springframework.format;

public interface FormatterRegistrar{
  void registerFormatters(FormatterRegistry registry);
}
//

@Configuration
  public class AppConfig{

    @Bean
    public FormattingConversionService conversionService(){

      DefaultFotmattingConversionService conversionService = new DefaultFormattingConversionService(false);

      conversionService.addFormatterForFieldAnnotation(new
        NumberFormatAnnotationFormatterFactory());


      DateTimeFormatterRegistry registrar = new DateTimeFormatterRegistry();
      registrar.setDateFormatter(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
      registerar.registerFormatters(conversionService);

      DateFormatterRegister registrar = new DateFormatterRegister();
      registerar.setFormatter(new DateFormatter("yyyyMMdd"));
      registerar.registerFormatters(conversionService);

      return conversionService;
    }
  }
//

public class PersonForm{
  private String name;
  private int age;
  
}

public class PersonForm{

  @NotNull
  @Size(max = 64)
  private String name;

  @Min(0)
  private int age;
}

@Configuration
  public class AppConfig{

    @Bean
    public LocalValidatorFactoryBean validator(){
      return new LocalValidatorFactoryBean();
  }
  }
//
@Service
  public class MyService{

    @Autowired
    private Validator validator;
    
  }

//
@Service
  public class MyService{
    @Autowired
    private Validator validator;
  }
//
@Target({ElementType.METHOD, ElementType.FIELD})
  @Retention(RetentionPolicy.RUNTIME)
  @Constraint(validatedBy=MyConstraintValidator.class)
  public @interface MyConstraint{
  }

//
public class MyConstraintValidator implements ConstraintValidator{

    @Autowired;
  private Foo aDependency;
  
  
}
//

@Configuration
  public class AppConfig{

    @Bean
    public MethodValidationPostProcessor validationPostProcessor(){
      return new MethodValidationPostProcessor();
    }
  }
//
Foo target = new Foo();
DateBinder binder = new DateBinder(target);
binder.setValidator(new FooValidator());

binder.bind(propertyValues);

binder.validate();

BindingResult result = binder.getBindingResult();

//

ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello World'.concat('!')");
String message = (String ) exp.getValue();


//

ExpressionParser parser = new SpelExpressionParser();

Expreession exp = parser.parseExpression("'Hello World'. bytes");
byte[] bytes = (byte[]) exp.getValue();

//
ExpressionParser parser = new SpelExpressionParser();

Expression exp = parser.parseExpression("'Hello World'.length()");
int length = (Integer) exp.getValue();
//
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("new String ('hello world').toUppercase()");
String message =  exp.getValue(String.class);

//
GregorianCalendar c = new GregorianCalendar();
c.set(1856, 7, 9);

Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

ExpreessionParser parser = new SpelExpressionParser();

Expreession exp = parser.parseExpression("name");
String name = (String) exp.getValue(tesla);

exp = parser.parseExpression("name== 'Nikola Tesla'");
boolean result = exp.getValue(tesla, Boolean.class);

//
class Simple{
  public List<Boolean> booleanList = new ArrayList<Boolean>();
}

Simple simple = new Simple();

simple.booleanList.add(true);

EvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();

parser.parseExpression("booleanList[0]").setValue(context, simple, "false");

Boolean b = simple.booleanList.get(0);

//
class Demo{
  public List<String> list;
}

SpelParserConfiguration config = new SpelParserConfiguration(true, true);

Expression expression = parser.parseExpression("list[3]");

Demo demo = new Demo();

Object o = expression.getValue(demo);
//
SpelParserConfiguration config = new 
  SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,
                         this.getClass().getClassLoader());

SpelExpressionParser parser = new SpelExpressionParser(config);

Expression expr = parser.parseExpression("payload");

MyMessage message = new MyMessage();
Object payload = expr.getValue(message);
//


public class FieldValueTestBean{

  @Value("# {systemProperties['user.region']}")
  private String defaultLocale;

  public void setDefaultLocale(String defaultLocale){
    this.defaultLocale = defaultLocale;

}

  public String getDefaultLocale(){
    return this.defaultLocale;
  }
}
//
public class PropertyValueTestBean{

  private String defaultLocale;

  @Value("# {systemProperties['user.region']}")
  public void setDefaultLocale(String defaultLocale){
    this.defaultLocale = defaultLocale;
}
  public String getDefaultLocale(){
    return this.defaultLocale;
  }
}
//
public class SimpleMovieLister{

  private MovieFinder movieFinder;
  private String defaultLocale;

  @Autowired
  public void configure(MovieFinder movieFinder, 
@Value("#{systemProperties['user.reqion']}")   String defaultLocale){

  this.movieFinder = movieFinder;
    this.defaultLocale = defaultLocale;
  }
  }
  //
public class MovieRecommender{

  private String defaultLocale;

  private CustomerPreferenceDao customerPreferenceDao;

  public MovieRecommender(CustomerPreferenceDao customerPreferenceDao,
                          @Value("#{systemProperties['user.region']}") String defaultLocale}"){

    this.customerPreferenceDao = customerPreferenceDao;
    this.defaultLocale = defaultLocale;
  }
  
}

//
ExpressionParser parser = new SpelExpressionParser();

String helloWorld = (String )parser.parseExpression("'Hello World'").getValue();

double avogadroNumber = (Double)parser.parseExpreession("6.02214076e+23").getValue();

int maxValue = (Integer)parser.parseExpression("0x7FFFFFFF").getValue();

boolean trueValue = (Boolean)parser.parseExpression("true").getValue();

Object nullValue = parser.parseExpression("null").getValue();

//
int year = (Integer) parser.parseExpression("birthdate.year + 
                                            1900").getValue(context);

String city = (String ) parser.parseExpression("placaOfBirth.city").getValue(context);

//
ExpressionParser parser = new SpelExpressionParser();
EvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();

String invention = parser.parseExpression("inventions[3]").getValue(
  context, String.class);

String name = parser.parseExpression("members[0].name").getValue(
  context, ieee, String.class);

String invention = parser.parseExpression("members[0].inventions[6]).getValue(
  context, ieee,String.class);
//

Inventor pupin = parser.parseExpression("officers['president']").getValue(
  societyContext, Inventor.class);

String city = 
  parser.parseExpression("officers['president'].placeOfBirth.city").getValue(

    societyContext, String.class);

parser.parseExpression("officers['president'].placeOfBirth.city").setValue(
  societyContext, "Croatia");

//
List numbers = (List) parser.parseExpression("{1,2,3,4}").getValue(context);

List listOfLists = (List)
                    parser.parseExpression("{'a','b'}, {'x','y'}").getValue(context);

//
Map inventorInfo = (Map) parser.parseExpression("{'name':'Nikola Tesla', 'dob': 10-
  July-1856'}").getValue(context);

Map mapOfMaps =(Map)
                parser.parseExpression("{name:{first:'Nikola', last:'Tesla'}, dob:{year:1856, month:'July', day:10}}").getValue(context);

//
int[] numbers1 = (int[]) parser.parseExpression("new int[4]").getValue(context);

//293P
